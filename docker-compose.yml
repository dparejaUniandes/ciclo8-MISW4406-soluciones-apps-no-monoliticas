version: '3.8'

networks:
  pulsar:
    driver: bridge
  db_gestionclientes:
    driver: bridge
  ms_gestionclientes:
    driver: bridge
  db_notificaciones:
    driver: bridge
  db_integracionpagos:
    driver: bridge

services:
# Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

# Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

# Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
  # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

# Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"

  db-clientes:
    image: postgres:15-alpine
    profiles: ["app-clientes", "db"]
    container_name: db-clientes
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: gestionclientes
      PGUSER: postgres
    ports:
      - "5433:5432"
  
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 40s
      timeout: 20s
      retries: 5
    networks:
      - db_gestionclientes
  
  
  db-pagos:
    image: postgres:15-alpine
    profiles: ["app-pagos", "db"]
    container_name: db-pagos
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: integracionpagos
      PGUSER: postgres
    ports:
      - "5434:5432"
  
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 40s
      timeout: 20s
      retries: 5
    networks:
      - db_integracionpagos
  
  db-notificaciones:
    image: postgres:15-alpine
    profiles: ["app-notificaciones", "db"]
    container_name: db-notificaciones
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: notificaciones
      PGUSER: postgres
    ports:
      - "5435:5432"
  
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 40s
      timeout: 20s
      retries: 5
    networks:
      - db_notificaciones

  ms-gestionclientes:
    build: 
      context: .
      dockerfile: gestionclientes.Dockerfile
    hostname: clientes  
    container_name: ms-clientes
    # image: us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_gestionclientes
    profiles: ["app-clientes"]
    restart: always
    depends_on:
      db-clientes:
        condition: service_healthy
    environment:
      FLASK_APP: src/gestionclientes/api
      FLASK_ENV: development
      DB_HOST_URL: db-clientes
      DB_NAME: gestionclientes
      DB_USER: postgres
      DB_PASSWORD: 123456
      DB_PORT: 5432
      BROKER_HOST: 34.72.58.111
  
    ports:
      - "5001:5000"
    command: ["flask", "--debug", "run", "--host=0.0.0.0", "--port=5000"]
    volumes:
      - .:/app
    networks:
      - pulsar
      - db_gestionclientes
      - ms_gestionclientes
  
  ms-pagos:
    build: 
      context: .
      dockerfile: ./integracionpagos.Dockerfile
    container_name: ms-pagos
    # image: us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_integracion_pagos
    profiles: ["app-pagos"]
    restart: always
    depends_on:
      db-pagos:
        condition: service_healthy
    environment:
      FLASK_APP: src/integracionpagos
      FLASK_ENV: development
      DB_HOST_URL: db-pagos
      DB_NAME: integracionpagos
      DB_USER: postgres
      DB_PASSWORD: 123456
      DB_PORT: 5434
      PULSAR_ADDRESS: 34.72.58.111
      BROKER_HOST: 34.72.58.111
  
    volumes:
      - .:/app
    networks:
      - pulsar
      - db_integracionpagos
    
  ms-notificaciones:
    build: 
      context: .
      dockerfile: ./notificaciones.Dockerfile
    container_name: ms-notificaciones
    # image: us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_notificaciones
    profiles: ["app-notificaciones"]
    restart: always
    depends_on:
      db-notificaciones:
        condition: service_healthy
    environment:
      FLASK_APP: src/notificaciones/api
      FLASK_ENV: development
      DB_HOST_URL: db-notificaciones
      DB_NAME: notificaciones
      DB_USER: postgres
      DB_PASSWORD: 123456
      DB_PORT: 5432
      PULSAR_ADDRESS: 34.72.58.111
      BROKER_HOST: 34.72.58.111
    ports:
      - "5001:5001"
    command: ["flask", "--debug", "run", "--host=0.0.0.0", "--port=5001"]
    volumes:
      - .:/app
    networks:
      - pulsar
      - db_notificaciones
  
  # Servicio BFF
  bff:
    build: 
      context: .
      dockerfile: ./bff.Dockerfile
    container_name: bff
    hostname: bff
    image: us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/bff
    profiles: ["bff"]
    environment:
      - SALUDTECH_ADDRESS=clientes
      - BROKER_HOST=34.72.58.111
    networks:
      - pulsar
      - ms_gestionclientes
    ports:
      - "5002:8003"

volumes:
  postgres_data:

# docker tag 86daa82cec21 us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_integracion_pagos
# docker push us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_integracion_pagos

# docker tag  841e57e23ac8 us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_notificaciones
# docker push us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_notificaciones

# docker tag 4d3ece5eb31d us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_gestionclientes
# docker push us-central1-docker.pkg.dev/monomaster-saludtech/saludtech/ms_gestionclientes